// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ScMofeoluwa/GatherGo/internal/domain/user/entity"
	mock "github.com/stretchr/testify/mock"

	util "github.com/ScMofeoluwa/GatherGo/internal/util"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

type UserServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceInterface) EXPECT() *UserServiceInterface_Expecter {
	return &UserServiceInterface_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function with given fields: ctx, data
func (_m *UserServiceInterface) SignIn(ctx context.Context, data *entity.CreateUser) (util.TokenPair, error) {
	ret := _m.Called(ctx, data)

	var r0 util.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CreateUser) (util.TokenPair, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CreateUser) util.TokenPair); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(util.TokenPair)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.CreateUser) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceInterface_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type UserServiceInterface_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.CreateUser
func (_e *UserServiceInterface_Expecter) SignIn(ctx interface{}, data interface{}) *UserServiceInterface_SignIn_Call {
	return &UserServiceInterface_SignIn_Call{Call: _e.mock.On("SignIn", ctx, data)}
}

func (_c *UserServiceInterface_SignIn_Call) Run(run func(ctx context.Context, data *entity.CreateUser)) *UserServiceInterface_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.CreateUser))
	})
	return _c
}

func (_c *UserServiceInterface_SignIn_Call) Return(_a0 util.TokenPair, _a1 error) *UserServiceInterface_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceInterface_SignIn_Call) RunAndReturn(run func(context.Context, *entity.CreateUser) (util.TokenPair, error)) *UserServiceInterface_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, data
func (_m *UserServiceInterface) SignUp(ctx context.Context, data *entity.CreateUser) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CreateUser) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserServiceInterface_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type UserServiceInterface_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.CreateUser
func (_e *UserServiceInterface_Expecter) SignUp(ctx interface{}, data interface{}) *UserServiceInterface_SignUp_Call {
	return &UserServiceInterface_SignUp_Call{Call: _e.mock.On("SignUp", ctx, data)}
}

func (_c *UserServiceInterface_SignUp_Call) Run(run func(ctx context.Context, data *entity.CreateUser)) *UserServiceInterface_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.CreateUser))
	})
	return _c
}

func (_c *UserServiceInterface_SignUp_Call) Return(_a0 error) *UserServiceInterface_SignUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserServiceInterface_SignUp_Call) RunAndReturn(run func(context.Context, *entity.CreateUser) error) *UserServiceInterface_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
