// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "users" ("email", "password")
VALUES ($1, $2)
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Email, arg.Password)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, verified, registered_at, password FROM users
WHERE email =  $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID          `json:"id"`
	Email        string             `json:"email"`
	Verified     pgtype.Bool        `json:"verified"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	Password     string             `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Verified,
		&i.RegisteredAt,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, verified, registered_at FROM users
WHERE id =  $1 LIMIT 1
`

type GetUserByIDRow struct {
	ID           uuid.UUID          `json:"id"`
	Email        string             `json:"email"`
	Verified     pgtype.Bool        `json:"verified"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Verified,
		&i.RegisteredAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  email = COALESCE($1, email),
  password = COALESCE($2, password),
  verified = COALESCE($3, verified)
WHERE id = sql.arg(id)
`

type UpdateUserParams struct {
	Email    pgtype.Text `json:"email"`
	Password pgtype.Text `json:"password"`
	Verified pgtype.Bool `json:"verified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Email, arg.Password, arg.Verified)
	return err
}
